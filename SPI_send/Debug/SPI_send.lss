
SPI_send.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000140  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c0  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000747  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000330  00000000  00000000  00001247  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001578  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c8  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000168  00000000  00000000  000019a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001b0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  78:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <SPIMasterInit>:

// initialize SPI as master	
void SPIMasterInit(void)
{
	//Set MOSI, SCK, SS as output
	DDRB |= (1<<PINB3) | (1<<PINB5) | (1<<PINB2);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8c 62       	ori	r24, 0x2C	; 44
  84:	84 b9       	out	0x04, r24	; 4
	//Set SS to high
	PORTB|= (1<<PINB2);
  86:	2a 9a       	sbi	0x05, 2	; 5
	//Enable master SPI at clock rate 16mHz/16 = 1mHz
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
  88:	81 e5       	ldi	r24, 0x51	; 81
  8a:	8c bd       	out	0x2c, r24	; 44
  8c:	08 95       	ret

0000008e <SPIMasterSend>:

//Send a byte of data in parameter
void SPIMasterSend (uint8_t data)
{
	//Slave select, slave is selected when SS pins is low
	PORTB &= ~(1<<PINB2);
  8e:	2a 98       	cbi	0x05, 2	; 5
	//Send data
	SPDR = data;
  90:	8e bd       	out	0x2e, r24	; 46
	//Wait for transfer to complete
	while (!(SPSR &(1<<SPIF)));
  92:	0d b4       	in	r0, 0x2d	; 45
  94:	07 fe       	sbrs	r0, 7
  96:	fd cf       	rjmp	.-6      	; 0x92 <SPIMasterSend+0x4>
	//SS to high
	PORTB |=(1<<PINB2);
  98:	2a 9a       	sbi	0x05, 2	; 5
  9a:	08 95       	ret

0000009c <delay_ms>:
}
	
//alternative delay functions, needed if they are used dynamic
void delay_ms(uint16_t ms) //milliseconds
{
	while(ms--)
  9c:	00 97       	sbiw	r24, 0x00	; 0
  9e:	41 f0       	breq	.+16     	; 0xb0 <delay_ms+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	ef ec       	ldi	r30, 0xCF	; 207
  a2:	f7 e0       	ldi	r31, 0x07	; 7
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <delay_ms+0x8>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <delay_ms+0xe>
  aa:	00 00       	nop
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	c1 f7       	brne	.-16     	; 0xa0 <delay_ms+0x4>
  b0:	08 95       	ret

000000b2 <main>:
void delay_us(uint16_t us);	
	
int main(void)
	{
	//Initialize Master SPI
	SPIMasterInit(); 
  b2:	0e 94 40 00 	call	0x80	; 0x80 <SPIMasterInit>
		while (1)
		{
			for (int i=0; i<7; i++)
			{
			SPIMasterSend(0x01<<i);
  b6:	ff 24       	eor	r15, r15
  b8:	f3 94       	inc	r15
void SPIMasterSend (uint8_t data);
void delay_ms(uint16_t ms);
void delay_us(uint16_t us);	
	
int main(void)
	{
  ba:	01 e0       	ldi	r16, 0x01	; 1
  bc:	10 e0       	ldi	r17, 0x00	; 0
  be:	c0 e0       	ldi	r28, 0x00	; 0
  c0:	d0 e0       	ldi	r29, 0x00	; 0
  c2:	03 c0       	rjmp	.+6      	; 0xca <main+0x18>
  c4:	21 96       	adiw	r28, 0x01	; 1
  c6:	0f 5f       	subi	r16, 0xFF	; 255
  c8:	1f 4f       	sbci	r17, 0xFF	; 255
	SPIMasterInit(); 
		while (1)
		{
			for (int i=0; i<7; i++)
			{
			SPIMasterSend(0x01<<i);
  ca:	8f 2d       	mov	r24, r15
  cc:	0c 2e       	mov	r0, r28
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <main+0x20>
  d0:	88 0f       	add	r24, r24
  d2:	0a 94       	dec	r0
  d4:	ea f7       	brpl	.-6      	; 0xd0 <main+0x1e>
  d6:	0e 94 47 00 	call	0x8e	; 0x8e <SPIMasterSend>
			delay_ms((i==0) ? 1*(i+100) : i*(i+100)); //ternary operator if/else http://www.tutorialspoint.com/ansi_c/ternary_operator_examples.htm
  da:	20 97       	sbiw	r28, 0x00	; 0
  dc:	29 f4       	brne	.+10     	; 0xe8 <main+0x36>
  de:	84 e6       	ldi	r24, 0x64	; 100
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 4e 00 	call	0x9c	; 0x9c <delay_ms>
  e6:	ee cf       	rjmp	.-36     	; 0xc4 <main+0x12>
  e8:	ce 01       	movw	r24, r28
  ea:	8c 59       	subi	r24, 0x9C	; 156
  ec:	9f 4f       	sbci	r25, 0xFF	; 255
  ee:	9c 01       	movw	r18, r24
  f0:	2c 9f       	mul	r18, r28
  f2:	c0 01       	movw	r24, r0
  f4:	2d 9f       	mul	r18, r29
  f6:	90 0d       	add	r25, r0
  f8:	3c 9f       	mul	r19, r28
  fa:	90 0d       	add	r25, r0
  fc:	11 24       	eor	r1, r1
  fe:	0e 94 4e 00 	call	0x9c	; 0x9c <delay_ms>
	{
	//Initialize Master SPI
	SPIMasterInit(); 
		while (1)
		{
			for (int i=0; i<7; i++)
 102:	07 30       	cpi	r16, 0x07	; 7
 104:	11 05       	cpc	r17, r1
 106:	f4 f2       	brlt	.-68     	; 0xc4 <main+0x12>
 108:	c7 e0       	ldi	r28, 0x07	; 7
 10a:	d0 e0       	ldi	r29, 0x00	; 0
			delay_ms((i==0) ? 1*(i+100) : i*(i+100)); //ternary operator if/else http://www.tutorialspoint.com/ansi_c/ternary_operator_examples.htm
			}
			
			for (int i=7; i>=0; i--)
			{
			SPIMasterSend(0x01<<i);
 10c:	8f 2d       	mov	r24, r15
 10e:	0c 2e       	mov	r0, r28
 110:	01 c0       	rjmp	.+2      	; 0x114 <main+0x62>
 112:	88 0f       	add	r24, r24
 114:	0a 94       	dec	r0
 116:	ea f7       	brpl	.-6      	; 0x112 <main+0x60>
 118:	0e 94 47 00 	call	0x8e	; 0x8e <SPIMasterSend>
			delay_ms(i*(i+100));
 11c:	ce 01       	movw	r24, r28
 11e:	8c 59       	subi	r24, 0x9C	; 156
 120:	9f 4f       	sbci	r25, 0xFF	; 255
 122:	9c 01       	movw	r18, r24
 124:	2c 9f       	mul	r18, r28
 126:	c0 01       	movw	r24, r0
 128:	2d 9f       	mul	r18, r29
 12a:	90 0d       	add	r25, r0
 12c:	3c 9f       	mul	r19, r28
 12e:	90 0d       	add	r25, r0
 130:	11 24       	eor	r1, r1
 132:	0e 94 4e 00 	call	0x9c	; 0x9c <delay_ms>
			{
			SPIMasterSend(0x01<<i);
			delay_ms((i==0) ? 1*(i+100) : i*(i+100)); //ternary operator if/else http://www.tutorialspoint.com/ansi_c/ternary_operator_examples.htm
			}
			
			for (int i=7; i>=0; i--)
 136:	21 97       	sbiw	r28, 0x01	; 1
 138:	48 f7       	brcc	.-46     	; 0x10c <main+0x5a>
 13a:	bf cf       	rjmp	.-130    	; 0xba <main+0x8>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
